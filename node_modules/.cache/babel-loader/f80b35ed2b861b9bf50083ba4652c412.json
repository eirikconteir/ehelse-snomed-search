{"ast":null,"code":"import * as React from 'react';\nimport { parse as parseQueryString, parseUrl as parseQueryURL, stringify, StringParam } from 'serialize-query-params';\nimport { QueryParamContext } from './QueryParamProvider';\nimport { updateUrlQuery } from './updateUrlQuery';\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\nexport var useQueryParam = function (name, paramConfig, rawQuery) {\n  var _a;\n\n  if (paramConfig === void 0) {\n    paramConfig = StringParam;\n  }\n\n  var _b = React.useContext(QueryParamContext),\n      history = _b.history,\n      location = _b.location; // ref with current version history object (see #46)\n\n\n  var refHistory = React.useRef(history);\n  React.useEffect(function () {\n    refHistory.current = history;\n  }, [history]); // ref with current version location object (see #46)\n\n  var refLocation = React.useRef(location);\n  React.useEffect(function () {\n    refLocation.current = location;\n  }, [location]); // read in the raw query\n\n  if (!rawQuery) {\n    var locationIsObject_1 = typeof location === 'object';\n    var windowIsDefined_1 = typeof window !== 'undefined';\n    rawQuery = React.useMemo(function () {\n      var pathname = {}; // handle checking SSR (#13)\n\n      if (locationIsObject_1) {\n        // in browser\n        if (windowIsDefined_1) {\n          pathname = parseQueryString(location.search);\n        } else {\n          // not in browser\n          var url = location.pathname;\n\n          if (location.search) {\n            url += location.search;\n          }\n\n          pathname = parseQueryURL(url).query;\n        }\n      }\n\n      return pathname || {};\n    }, [location.search, location.pathname, locationIsObject_1, windowIsDefined_1]);\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // note that we use the stringified encoded value since the encoded\n  // value may be an array that is recreated if a different query param\n  // changes. It is sufficient to use this instead of encodedValue in\n  // the useMemo dependency array since it will change any time the actual\n  // meaningful value of encodedValue changes.\n\n  var arraySafeEncodedValue = encodedValue instanceof Array ? stringify((_a = {}, _a[name] = encodedValue, _a)) : encodedValue; // decode if the encoded value has changed, otherwise\n  // re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    if (encodedValue == null) {\n      return undefined;\n    }\n\n    return paramConfig.decode(encodedValue);\n  }, [arraySafeEncodedValue, paramConfig]); // eslint-disable-line react-hooks/exhaustive-deps\n  // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var _a;\n\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery((_a = {}, _a[name] = newEncodedValue, _a), refHistory.current.location || refLocation.current, // see #46 for why we use a ref here\n    refHistory.current, updateType);\n  }, [paramConfig, name]);\n  return [decodedValue, setValue];\n};","map":null,"metadata":{},"sourceType":"module"}