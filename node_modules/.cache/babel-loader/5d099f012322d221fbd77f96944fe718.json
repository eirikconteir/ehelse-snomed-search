{"ast":null,"code":"/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams(paramConfigMap, query) {\n  var encodedQuery = {};\n  var paramNames = Object.keys(query);\n\n  for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n    var paramName = paramNames_1[_i];\n    var decodedValue = query[paramName];\n\n    if (decodedValue == null) {\n      encodedQuery[paramName] = undefined;\n      continue;\n    }\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Encoding parameter \" + paramName + \" as string since it was not configured.\");\n      } // NOTE: we could just not encode it, but it is probably convenient to have\n      // it be included by default as a string type.\n\n\n      encodedQuery[paramName] = String(decodedValue);\n    } else {\n      encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n    }\n  }\n\n  return encodedQuery;\n}\nexport default encodeQueryParams;","map":null,"metadata":{},"sourceType":"module"}