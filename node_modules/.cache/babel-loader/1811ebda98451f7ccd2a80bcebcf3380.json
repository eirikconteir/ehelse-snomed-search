{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function (location) {\n      history.replaceState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    },\n    push: function (location) {\n      history.pushState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function (location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: true\n      });\n    },\n    push: function (location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue(contextValue) {\n  if (contextValue === void 0) {\n    contextValue = {};\n  }\n\n  var value = __assign({}, contextValue);\n\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexport var QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nexport function QueryParamProvider(_a) {\n  var children = _a.children,\n      ReactRouterRoute = _a.ReactRouterRoute,\n      reachHistory = _a.reachHistory,\n      history = _a.history,\n      location = _a.location; // if we have React Router, use it to get the context value\n\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\nexport default QueryParamProvider;","map":null,"metadata":{},"sourceType":"module"}