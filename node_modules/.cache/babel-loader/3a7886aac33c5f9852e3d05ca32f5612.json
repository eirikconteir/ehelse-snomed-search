{"ast":null,"code":"import DebouncePromise from 'debounce-promise';\nimport { onlyResolvesLast } from 'awesome-only-resolves-last-promise';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar DefaultOptions = {\n  // One distinct debounced function is created per key and added to an internal cache\n  // By default, the key is null, which means that all the calls\n  // will share the same debounced function\n  key: function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n\n    return null;\n  },\n  // By default, a debounced function will only resolve\n  // the last promise it returned\n  // Former calls will stay unresolved, so that you don't have\n  // to handle concurrency issues in your code\n  // Setting this to false means all returned promises will resolve to the last result\n  onlyResolvesLast: true\n}; // We create a debouncing function cache, because when wrapping the original function,\n// we may actually want to route the function call to different debounced functions depending function paameters\n\nvar DebounceCache =\n/** @class */\nfunction () {\n  function DebounceCache(config) {\n    this.config = config;\n    this.debounceSingleton = null;\n    this.debounceCache = {}; // when key feature is used\n  }\n\n  DebounceCache.prototype._createDebouncedFunction = function () {\n    var debouncedFunc = DebouncePromise(this.config.func, this.config.wait, this.config.options); // TODO TS\n\n    if (this.config.options.onlyResolvesLast) {\n      debouncedFunc = onlyResolvesLast(debouncedFunc);\n    }\n\n    return {\n      func: debouncedFunc\n    };\n  };\n\n  DebounceCache.prototype.getDebouncedFunction = function (args) {\n    var _a;\n\n    var key = (_a = this.config.options).key.apply(_a, args);\n\n    if (key === null || typeof key === 'undefined') {\n      if (!this.debounceSingleton) {\n        this.debounceSingleton = this._createDebouncedFunction();\n      }\n\n      return this.debounceSingleton;\n    } else {\n      if (!this.debounceCache[key]) {\n        this.debounceCache[key] = this._createDebouncedFunction();\n      }\n\n      return this.debounceCache[key];\n    }\n  };\n\n  return DebounceCache;\n}();\n\nfunction AwesomeDebouncePromise(func, wait, options) {\n  var finalOptions = __assign({}, DefaultOptions, options);\n\n  var debounceCache = new DebounceCache({\n    func: func,\n    wait: wait,\n    options: finalOptions\n  });\n\n  var AwesomeDebouncePromiseWrapper = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var debouncedFn = debounceCache.getDebouncedFunction(args).func;\n    return debouncedFn.apply(void 0, args);\n  }; // TODO fix TS\n\n  /*\r\n  AwesomeDebouncePromiseWrapper.cancel = (key?: string) => {\r\n     };\r\n  */\n\n\n  return AwesomeDebouncePromiseWrapper;\n}\n\nexport default AwesomeDebouncePromise;","map":null,"metadata":{},"sourceType":"module"}