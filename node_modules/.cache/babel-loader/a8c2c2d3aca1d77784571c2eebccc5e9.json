{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport useQueryParams from './useQueryParams';\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\n\nexport function withQueryParams(paramConfigMap, WrappedComponent) {\n  // return a FC that takes props excluding query and setQuery\n  var Component = function (props) {\n    var _a = useQueryParams(paramConfigMap),\n        query = _a[0],\n        setQuery = _a[1]; // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n\n\n    return React.createElement(WrappedComponent, __assign({\n      query: query,\n      setQuery: setQuery\n    }, props));\n  };\n\n  Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n  return Component;\n}\nexport default withQueryParams;","map":null,"metadata":{},"sourceType":"module"}