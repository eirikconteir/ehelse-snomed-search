{"ast":null,"code":"import { apiOptions, handleResponse } from \"../api\";\nimport { limit } from \"../config\";\nexport const fetchConcepts = (host, branch, query, referenceSet) => {\n  const url = new URL(`browser/${branch}/descriptions`, host);\n  url.searchParams.set(\"limit\", limit);\n  url.searchParams.set(\"active\", \"true\");\n  url.searchParams.set(\"groupByConcept\", \"true\");\n  url.searchParams.set(\"language\", \"no\");\n  url.searchParams.append(\"language\", \"nb-NO\");\n  url.searchParams.append(\"language\", \"nb\");\n  url.searchParams.append(\"language\", \"nn\");\n  url.searchParams.append(\"language\", \"en\");\n  url.searchParams.set(\"conceptActive\", \"true\");\n  url.searchParams.set(\"conceptRefset\", referenceSet);\n  url.searchParams.set(\"term\", query);\n  return fetch(url.toString(), apiOptions).then(response => handleResponse(response));\n};","map":{"version":3,"sources":["/Users/eirik/Kodz/ehelse-search/src/store/ConceptStore.ts"],"names":["apiOptions","handleResponse","limit","fetchConcepts","host","branch","query","referenceSet","url","URL","searchParams","set","append","fetch","toString","then","response"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,QAA3C;AACA,SAASC,KAAT,QAAsB,WAAtB;AAqBA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,MAF2B,EAG3BC,KAH2B,EAI3BC,YAJ2B,KAKxB;AACH,QAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAS,WAAUJ,MAAO,eAA1B,EAA0CD,IAA1C,CAAZ;AACAI,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,OAArB,EAA8BT,KAA9B;AACAM,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,QAArB,EAA+B,MAA/B;AACAH,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,gBAArB,EAAuC,MAAvC;AACAH,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,UAArB,EAAiC,IAAjC;AACAH,EAAAA,GAAG,CAACE,YAAJ,CAAiBE,MAAjB,CAAwB,UAAxB,EAAoC,OAApC;AACAJ,EAAAA,GAAG,CAACE,YAAJ,CAAiBE,MAAjB,CAAwB,UAAxB,EAAoC,IAApC;AACAJ,EAAAA,GAAG,CAACE,YAAJ,CAAiBE,MAAjB,CAAwB,UAAxB,EAAoC,IAApC;AACAJ,EAAAA,GAAG,CAACE,YAAJ,CAAiBE,MAAjB,CAAwB,UAAxB,EAAoC,IAApC;AACAJ,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,eAArB,EAAsC,MAAtC;AACAH,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,eAArB,EAAsCJ,YAAtC;AACAC,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,MAArB,EAA6BL,KAA7B;AACA,SAAOO,KAAK,CAACL,GAAG,CAACM,QAAJ,EAAD,EAAiBd,UAAjB,CAAL,CAAkCe,IAAlC,CAAwCC,QAAD,IAC5Cf,cAAc,CAAiBe,QAAjB,CADT,CAAP;AAGD,CArBM","sourcesContent":["import { apiOptions, handleResponse } from \"../api\";\nimport { limit } from \"../config\";\n\ninterface ITerm {\n  term: string;\n}\n\ninterface IConcept {\n  conceptId: string;\n  fsn: Readonly<ITerm>;\n  pt: Readonly<ITerm>;\n}\n\ninterface IDescription {\n  concept: Readonly<IConcept>;\n}\n\nexport interface IConceptResult {\n  totalElements: number;\n  items: IDescription[];\n}\n\nexport const fetchConcepts = (\n  host: string,\n  branch: string,\n  query: string,\n  referenceSet: string,\n) => {\n  const url = new URL(`browser/${branch}/descriptions`, host);\n  url.searchParams.set(\"limit\", limit);\n  url.searchParams.set(\"active\", \"true\");\n  url.searchParams.set(\"groupByConcept\", \"true\");\n  url.searchParams.set(\"language\", \"no\");\n  url.searchParams.append(\"language\", \"nb-NO\");\n  url.searchParams.append(\"language\", \"nb\");\n  url.searchParams.append(\"language\", \"nn\");\n  url.searchParams.append(\"language\", \"en\");\n  url.searchParams.set(\"conceptActive\", \"true\");\n  url.searchParams.set(\"conceptRefset\", referenceSet);\n  url.searchParams.set(\"term\", query);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IConceptResult>(response),\n  );\n};\n"]},"metadata":{},"sourceType":"module"}