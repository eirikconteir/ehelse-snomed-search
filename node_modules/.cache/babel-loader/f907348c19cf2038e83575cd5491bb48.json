{"ast":null,"code":"var _jsxFileName = \"/Users/eirik/Kodz/ehelse-search/src/components/Concept.tsx\";\nimport React from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { codeSystems } from \"../config\";\nimport { fetchCodeSystems } from \"../store\";\nimport ClinicalTrial from \"./ClinicalTrial\";\nimport Helsenorge from \"./Helsenorge\";\nimport Loading from \"./Loading\";\nimport Synonym from \"./Synonym\";\n\nconst Concept = ({\n  host,\n  branch,\n  preferredTerm,\n  fullySpecifiedName,\n  conceptId,\n  scope\n}) => {\n  const request = useAsync(fetchCodeSystems, [host, conceptId]);\n  const codeSystemResultList = request.result || [];\n  return React.createElement(\"div\", {\n    className: \"d-md-flex justify-content-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, preferredTerm), React.createElement(Synonym, {\n    host: host,\n    branch: branch,\n    conceptId: conceptId,\n    preferredTerm: preferredTerm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"mb-md-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, fullySpecifiedName), scope === \"trial\" && React.createElement(ClinicalTrial, {\n    conceptId: conceptId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), scope === \"helsenorge\" && React.createElement(Helsenorge, {\n    conceptId: conceptId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"dl\", {\n    className: \"mb-md-0 ml-md-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"dt\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Snomed CT\"), React.createElement(\"dd\", {\n    className: \"mb-md-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, conceptId)), request.loading && React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), codeSystemResultList.map(codeSystem => codeSystem.items.map(({\n    internalId,\n    refsetId,\n    additionalFields: {\n      mapAdvice: advice,\n      mapTarget: code\n    }\n  }) => {\n    const {\n      title\n    } = codeSystems.find(set => set.id === refsetId) || {};\n    return React.createElement(\"dl\", {\n      key: internalId,\n      className: \"mb-md-0 ml-md-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"dt\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, title), React.createElement(\"dd\", {\n      className: \"mb-md-0\",\n      title: advice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, code ? code : advice));\n  })));\n};\n\nexport default Concept;","map":{"version":3,"sources":["/Users/eirik/Kodz/ehelse-search/src/components/Concept.tsx"],"names":["React","useAsync","codeSystems","fetchCodeSystems","ClinicalTrial","Helsenorge","Loading","Synonym","Concept","host","branch","preferredTerm","fullySpecifiedName","conceptId","scope","request","codeSystemResultList","result","loading","map","codeSystem","items","internalId","refsetId","additionalFields","mapAdvice","advice","mapTarget","code","title","find","set","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { codeSystems } from \"../config\";\nimport { fetchCodeSystems } from \"../store\";\nimport ClinicalTrial from \"./ClinicalTrial\";\nimport Helsenorge from \"./Helsenorge\";\nimport Loading from \"./Loading\";\nimport Synonym from \"./Synonym\";\n\ntype ConceptProps = {\n  host: string;\n  branch: string;\n  preferredTerm: string;\n  fullySpecifiedName: string;\n  conceptId: string;\n  scope: string;\n};\n\nconst Concept = ({\n  host,\n  branch,\n  preferredTerm,\n  fullySpecifiedName,\n  conceptId,\n  scope,\n}: ConceptProps) => {\n  const request = useAsync(fetchCodeSystems, [host, conceptId]);\n\n  const codeSystemResultList = request.result || [];\n\n  return (\n    <div className=\"d-md-flex justify-content-between\">\n      <div>\n        <h2>{preferredTerm}</h2>\n        <Synonym\n          host={host}\n          branch={branch}\n          conceptId={conceptId}\n          preferredTerm={preferredTerm}\n        />\n        <p className=\"mb-md-0\">{fullySpecifiedName}</p>\n        {scope === \"trial\" && <ClinicalTrial conceptId={conceptId} />}\n        {scope === \"helsenorge\" && <Helsenorge conceptId={conceptId} />}\n      </div>\n      <dl className=\"mb-md-0 ml-md-5\">\n        <dt>Snomed CT</dt>\n        <dd className=\"mb-md-0\">{conceptId}</dd>\n      </dl>\n      {request.loading && <Loading />}\n      {codeSystemResultList.map((codeSystem) =>\n        codeSystem.items.map(\n          ({\n            internalId,\n            refsetId,\n            additionalFields: { mapAdvice: advice, mapTarget: code },\n          }) => {\n            const { title } =\n              codeSystems.find((set) => set.id === refsetId) || {};\n            return (\n              <dl key={internalId} className=\"mb-md-0 ml-md-5\">\n                <dt>{title}</dt>\n                <dd className=\"mb-md-0\" title={advice}>\n                  {code ? code : advice}\n                </dd>\n              </dl>\n            );\n          },\n        ),\n      )}\n    </div>\n  );\n};\n\nexport default Concept;\n"]},"metadata":{},"sourceType":"module"}