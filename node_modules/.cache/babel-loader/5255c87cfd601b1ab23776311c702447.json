{"ast":null,"code":"/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return year + \"-\" + (month < 10 ? \"0\" + month : month) + \"-\" + (day < 10 ? \"0\" + day : day);\n}\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nexport function decodeDate(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n\n  var dateString = input instanceof Array ? input[0] : input;\n\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = new (Date.bind.apply(Date, [void 0].concat(parts)))();\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nexport function encodeDateTime(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  return date.toISOString();\n}\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\n\nexport function decodeDateTime(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n\n  var dateString = input instanceof Array ? input[0] : input;\n\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var decoded = new Date(dateString);\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nexport function encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n\n  return bool ? '1' : '0';\n}\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nexport function decodeBoolean(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var boolStr = input instanceof Array ? input[0] : input;\n\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return undefined;\n}\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nexport function encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n\n  return String(num);\n}\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\n\nexport function decodeNumber(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var numStr = input instanceof Array ? input[0] : input;\n\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n\n  var result = +numStr;\n\n  if (isNaN(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\n\nexport function encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\n\nexport function decodeString(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var str = input instanceof Array ? input[0] : input;\n\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nexport function encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n\n  return JSON.stringify(any);\n}\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\n\nexport function decodeJson(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var jsonStr = input instanceof Array ? input[0] : input;\n\n  if (!jsonStr) {\n    return undefined;\n  }\n\n  var result;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nexport function encodeArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array;\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nexport function decodeArray(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (!(input instanceof Array)) {\n    return [input];\n  }\n\n  return input.map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nexport function encodeNumericArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array.map(function (d) {\n    return \"\" + d;\n  });\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nexport function decodeNumericArray(input) {\n  var arr = decodeArray(input);\n\n  if (!arr) {\n    return undefined;\n  }\n\n  return arr.map(function (item) {\n    return +item;\n  }).filter(function (item) {\n    return item !== undefined && !isNaN(item);\n  });\n}\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\n\nexport function encodeDelimitedArray(array, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (!array) {\n    return undefined;\n  }\n\n  return array.join(entrySeparator);\n}\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\n\nexport function decodeDelimitedArray(input, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var arrayStr = input instanceof Array ? input[0] : input;\n\n  if (!arrayStr) {\n    return undefined;\n  }\n\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexport var encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nexport function decodeDelimitedNumericArray(arrayStr, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  }\n\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined && !isNaN(d);\n  });\n}\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexport function encodeObject(obj, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n\n  return Object.keys(obj).map(function (key) {\n    return \"\" + key + keyValSeparator + obj[key];\n  }).join(entrySeparator);\n}\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nexport function decodeObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var objStr = input instanceof Array ? input[0] : input;\n\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _a = entryStr.split(keyValSeparator),\n        key = _a[0],\n        value = _a[1];\n\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexport var encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nexport function decodeNumericObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  } // convert to numbers\n\n\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}","map":null,"metadata":{},"sourceType":"module"}