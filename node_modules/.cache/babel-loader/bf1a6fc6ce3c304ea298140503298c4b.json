{"ast":null,"code":"import { apiOptions, handleResponse } from \"../api\";\nimport { codeSystems, limit } from \"../config\";\nexport const fetchCodeSystems = (host, conceptId) => Promise.all(codeSystems.map(({\n  id,\n  branch\n}) => {\n  const url = new URL(`browser/${branch}/members`, host);\n  url.searchParams.set(\"limit\", limit);\n  url.searchParams.set(\"active\", \"true\");\n  url.searchParams.set(\"referenceSet\", id);\n  url.searchParams.set(\"referencedComponentId\", conceptId);\n  return fetch(url.toString(), apiOptions).then(response => handleResponse(response));\n}));","map":{"version":3,"sources":["/Users/eirik/Kodz/ehelse-search/src/store/CodeSystemStore.ts"],"names":["apiOptions","handleResponse","codeSystems","limit","fetchCodeSystems","host","conceptId","Promise","all","map","id","branch","url","URL","searchParams","set","fetch","toString","then","response"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,QAA3C;AACA,SAASC,WAAT,EAAsBC,KAAtB,QAAmC,WAAnC;AAiBA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAeC,SAAf,KAC9BC,OAAO,CAACC,GAAR,CACEN,WAAW,CAACO,GAAZ,CAAgB,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAoB;AAClC,QAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAS,WAAUF,MAAO,UAA1B,EAAqCN,IAArC,CAAZ;AACAO,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,OAArB,EAA8BZ,KAA9B;AACAS,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,QAArB,EAA+B,MAA/B;AACAH,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,cAArB,EAAqCL,EAArC;AACAE,EAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,uBAArB,EAA8CT,SAA9C;AACA,SAAOU,KAAK,CAACJ,GAAG,CAACK,QAAJ,EAAD,EAAiBjB,UAAjB,CAAL,CAAkCkB,IAAlC,CAAwCC,QAAD,IAC5ClB,cAAc,CAAoBkB,QAApB,CADT,CAAP;AAGD,CATD,CADF,CADK","sourcesContent":["import { apiOptions, handleResponse } from \"../api\";\nimport { codeSystems, limit } from \"../config\";\n\ninterface IFields {\n  mapAdvice: string;\n  mapTarget: string;\n}\n\ninterface ICodeSystem {\n  internalId: string;\n  refsetId: string;\n  additionalFields: Readonly<IFields>;\n}\n\ninterface ICodeSystemResult {\n  items: ICodeSystem[];\n}\n\nexport const fetchCodeSystems = (host: string, conceptId: string) =>\n  Promise.all(\n    codeSystems.map(({ id, branch }) => {\n      const url = new URL(`browser/${branch}/members`, host);\n      url.searchParams.set(\"limit\", limit);\n      url.searchParams.set(\"active\", \"true\");\n      url.searchParams.set(\"referenceSet\", id);\n      url.searchParams.set(\"referencedComponentId\", conceptId);\n      return fetch(url.toString(), apiOptions).then((response) =>\n        handleResponse<ICodeSystemResult>(response),\n      );\n    }),\n  );\n"]},"metadata":{},"sourceType":"module"}